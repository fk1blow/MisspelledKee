(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var app;

require('./states/app_states');

app = angular.module('misspelledkee', ['templates', 'misspelledkee.states', 'ui.router']);

app.config(function($locationProvider, $urlRouterProvider) {
  return $locationProvider.html5Mode(true);
});

app.run(function() {
  return console.log('app running...');
});


},{"./states/app_states":2}],2:[function(require,module,exports){
require('./dashboard/dashboard_state');

require('./groups/groups_state');

angular.module('misspelledkee.states', ['ui.router', 'misspelledkee.states.dashboard', 'misspelledkee.states.groups']).config(function($stateProvider, $urlRouterProvider) {
  return $urlRouterProvider.otherwise("/");
});


},{"./dashboard/dashboard_state":3,"./groups/groups_state":4}],3:[function(require,module,exports){
angular.module('misspelledkee.states.dashboard', []).config(function($stateProvider) {
  return $stateProvider.state('dashboard', {
    url: "/",
    controller: function() {
      return console.log('accessing dashboard state');
    }
  });
});


},{}],4:[function(require,module,exports){
angular.module('misspelledkee.states.groups', []).config(function($stateProvider) {
  return $stateProvider.state('groups', {
    url: "/groups",
    controller: function() {
      return console.log('accessing groups state');
    }
  });
});


},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9kcmFnb3N0dWRvcmFjaGUvUGxheWdyb3VuZC9NaXNzcGVsbGVkS2VlL25vZGVfbW9kdWxlcy9ndWxwLWJyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXItcGFjay9fcHJlbHVkZS5qcyIsIi9Vc2Vycy9kcmFnb3N0dWRvcmFjaGUvUGxheWdyb3VuZC9NaXNzcGVsbGVkS2VlL3NyYy9hcHAvYXBwLmNvZmZlZSIsIi9Vc2Vycy9kcmFnb3N0dWRvcmFjaGUvUGxheWdyb3VuZC9NaXNzcGVsbGVkS2VlL3NyYy9hcHAvc3RhdGVzL2FwcF9zdGF0ZXMuY29mZmVlIiwiL1VzZXJzL2RyYWdvc3R1ZG9yYWNoZS9QbGF5Z3JvdW5kL01pc3NwZWxsZWRLZWUvc3JjL2FwcC9zdGF0ZXMvZGFzaGJvYXJkL2Rhc2hib2FyZF9zdGF0ZS5jb2ZmZWUiLCIvVXNlcnMvZHJhZ29zdHVkb3JhY2hlL1BsYXlncm91bmQvTWlzc3BlbGxlZEtlZS9zcmMvYXBwL3N0YXRlcy9ncm91cHMvZ3JvdXBzX3N0YXRlLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBLElBQUEsR0FBQTs7QUFBQSxPQUFBLENBQVEscUJBQVIsQ0FBQSxDQUFBOztBQUFBLEdBRUEsR0FBTSxPQUFPLENBQUMsTUFBUixDQUFlLGVBQWYsRUFBZ0MsQ0FDcEMsV0FEb0MsRUFHcEMsc0JBSG9DLEVBS3BDLFdBTG9DLENBQWhDLENBRk4sQ0FBQTs7QUFBQSxHQVlHLENBQUMsTUFBSixDQUFXLFNBQUMsaUJBQUQsRUFBb0Isa0JBQXBCLEdBQUE7U0FDVCxpQkFBaUIsQ0FBQyxTQUFsQixDQUE0QixJQUE1QixFQURTO0FBQUEsQ0FBWCxDQVpBLENBQUE7O0FBQUEsR0FpQkcsQ0FBQyxHQUFKLENBQVEsU0FBQSxHQUFBO1NBQ04sT0FBTyxDQUFDLEdBQVIsQ0FBWSxnQkFBWixFQURNO0FBQUEsQ0FBUixDQWpCQSxDQUFBOzs7O0FDQUEsT0FBQSxDQUFRLDZCQUFSLENBQUEsQ0FBQTs7QUFBQSxPQUNBLENBQVEsdUJBQVIsQ0FEQSxDQUFBOztBQUFBLE9BSU8sQ0FBQyxNQUFSLENBQWUsc0JBQWYsRUFBdUMsQ0FDbkMsV0FEbUMsRUFFbkMsZ0NBRm1DLEVBR25DLDZCQUhtQyxDQUF2QyxDQUtFLENBQUMsTUFMSCxDQUtVLFNBQUMsY0FBRCxFQUFpQixrQkFBakIsR0FBQTtTQUNMLGtCQUFrQixDQUFDLFNBQW5CLENBQTZCLEdBQTdCLEVBREs7QUFBQSxDQUxWLENBSkEsQ0FBQTs7OztBQ0FBLE9BQU8sQ0FBQyxNQUFSLENBQWUsZ0NBQWYsRUFBaUQsRUFBakQsQ0FDRSxDQUFDLE1BREgsQ0FDVSxTQUFDLGNBQUQsR0FBQTtTQUNOLGNBQ0UsQ0FBQyxLQURILENBQ1MsV0FEVCxFQUVJO0FBQUEsSUFBQSxHQUFBLEVBQUssR0FBTDtBQUFBLElBQ0EsVUFBQSxFQUFZLFNBQUEsR0FBQTthQUNWLE9BQU8sQ0FBQyxHQUFSLENBQVksMkJBQVosRUFEVTtJQUFBLENBRFo7R0FGSixFQURNO0FBQUEsQ0FEVixDQUFBLENBQUE7Ozs7QUNBQSxPQUFPLENBQUMsTUFBUixDQUFlLDZCQUFmLEVBQThDLEVBQTlDLENBQ0UsQ0FBQyxNQURILENBQ1UsU0FBQyxjQUFELEdBQUE7U0FDTixjQUNFLENBQUMsS0FESCxDQUNTLFFBRFQsRUFFSTtBQUFBLElBQUEsR0FBQSxFQUFLLFNBQUw7QUFBQSxJQUNBLFVBQUEsRUFBWSxTQUFBLEdBQUE7YUFDVixPQUFPLENBQUMsR0FBUixDQUFZLHdCQUFaLEVBRFU7SUFBQSxDQURaO0dBRkosRUFETTtBQUFBLENBRFYsQ0FBQSxDQUFBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3Rocm93IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIil9dmFyIGY9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGYuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sZixmLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsInJlcXVpcmUgJy4vc3RhdGVzL2FwcF9zdGF0ZXMnXG5cbmFwcCA9IGFuZ3VsYXIubW9kdWxlICdtaXNzcGVsbGVka2VlJywgW1xuICAndGVtcGxhdGVzJ1xuXG4gICdtaXNzcGVsbGVka2VlLnN0YXRlcydcblxuICAndWkucm91dGVyJ1xuICAjICdrZS5zaWRlYmFyJ1xuICAjICdrZS5ncm91cHMnXG5dXG5cbmFwcC5jb25maWcgKCRsb2NhdGlvblByb3ZpZGVyLCAkdXJsUm91dGVyUHJvdmlkZXIpIC0+XG4gICRsb2NhdGlvblByb3ZpZGVyLmh0bWw1TW9kZSB0cnVlXG4gICMgJHVybFJvdXRlclByb3ZpZGVyLndoZW4oJy8nLCAnL2Rhc2hib2FyZCcpXG4gICMgJHVybFJvdXRlclByb3ZpZGVyLndoZW4oJy9ncm91cHMvOmlkJywgJy9ncm91cHMnKVxuXG5hcHAucnVuIC0+XG4gIGNvbnNvbGUubG9nICdhcHAgcnVubmluZy4uLidcbiIsInJlcXVpcmUgJy4vZGFzaGJvYXJkL2Rhc2hib2FyZF9zdGF0ZSdcbnJlcXVpcmUgJy4vZ3JvdXBzL2dyb3Vwc19zdGF0ZSdcblxuXG5hbmd1bGFyLm1vZHVsZSgnbWlzc3BlbGxlZGtlZS5zdGF0ZXMnLCBbXG4gICAgJ3VpLnJvdXRlcidcbiAgICAnbWlzc3BlbGxlZGtlZS5zdGF0ZXMuZGFzaGJvYXJkJ1xuICAgICdtaXNzcGVsbGVka2VlLnN0YXRlcy5ncm91cHMnXG4gIF0pXG4gIC5jb25maWcgKCRzdGF0ZVByb3ZpZGVyLCAkdXJsUm91dGVyUHJvdmlkZXIpIC0+XG4gICAgICR1cmxSb3V0ZXJQcm92aWRlci5vdGhlcndpc2UoXCIvXCIpO1xuXG4gICAgIyAgTm93IHNldCB1cCB0aGUgc3RhdGVzXG4gICAgIyAkc3RhdGVQcm92aWRlclxuICAgICMgICAuc3RhdGUgJ3N0YXRlMScsXG4gICAgIyAgICAgdXJsOiBcIi9zdGF0ZTFcIlxuICAgICMgICAgIHRlbXBsYXRlVXJsOiBcInBhcnRpYWxzL3N0YXRlMS5odG1sXCJcblxuICAgICAgIyAuc3RhdGUgJ3N0YXRlMS5saXN0JyxcbiAgICAgICMgICB1cmw6IFwiL2xpc3RcIlxuICAgICAgIyAgIHRlbXBsYXRlVXJsOiBcInBhcnRpYWxzL3N0YXRlMS5saXN0Lmh0bWxcIlxuICAgICAgIyAgIGNvbnRyb2xsZXI6ICgkc2NvcGUpIC0+XG4gICAgICAjICAgICAkc2NvcGUuaXRlbXMgPSBbXCJBXCIsIFwiTGlzdFwiLCBcIk9mXCIsIFwiSXRlbXNcIl1cblxuICAgICAgIyAuc3RhdGUgJ3N0YXRlMicsXG4gICAgICAjICAgdXJsOiBcIi9zdGF0ZTJcIlxuICAgICAgIyAgIHRlbXBsYXRlVXJsOiBcInBhcnRpYWxzL3N0YXRlMi5odG1sXCJcblxuICAgICAgIyAuc3RhdGUgJ3N0YXRlMi5saXN0JyxcbiAgICAgICMgICB1cmw6IFwiL2xpc3RcIlxuICAgICAgIyAgIHRlbXBsYXRlVXJsOiBcInBhcnRpYWxzL3N0YXRlMi5saXN0Lmh0bWxcIlxuICAgICAgIyAgIGNvbnRyb2xsZXI6ICgkc2NvcGUpIC0+XG4gICAgICAjICAgICAkc2NvcGUudGhpbmdzID0gW1wiQVwiLCBcIlNldFwiLCBcIk9mXCIsIFwiVGhpbmdzXCJdXG4iLCJhbmd1bGFyLm1vZHVsZSAnbWlzc3BlbGxlZGtlZS5zdGF0ZXMuZGFzaGJvYXJkJywgW11cbiAgLmNvbmZpZyAoJHN0YXRlUHJvdmlkZXIpIC0+XG4gICAgJHN0YXRlUHJvdmlkZXJcbiAgICAgIC5zdGF0ZSAnZGFzaGJvYXJkJyxcbiAgICAgICAgdXJsOiBcIi9cIlxuICAgICAgICBjb250cm9sbGVyOiAtPlxuICAgICAgICAgIGNvbnNvbGUubG9nICdhY2Nlc3NpbmcgZGFzaGJvYXJkIHN0YXRlJ1xuIiwiYW5ndWxhci5tb2R1bGUgJ21pc3NwZWxsZWRrZWUuc3RhdGVzLmdyb3VwcycsIFtdXG4gIC5jb25maWcgKCRzdGF0ZVByb3ZpZGVyKSAtPlxuICAgICRzdGF0ZVByb3ZpZGVyXG4gICAgICAuc3RhdGUgJ2dyb3VwcycsXG4gICAgICAgIHVybDogXCIvZ3JvdXBzXCJcbiAgICAgICAgY29udHJvbGxlcjogLT5cbiAgICAgICAgICBjb25zb2xlLmxvZyAnYWNjZXNzaW5nIGdyb3VwcyBzdGF0ZSdcbiAgICAgICAgIyB0ZW1wbGF0ZVVybDogXCJwYXJ0aWFscy9zdGF0ZTEuaHRtbFwiXG4iXX0=
